datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Provider {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(10)
  createdAt DateTime @default(now())

  users     User[]
}

model User {
  id           Int      @id @unique @default(autoincrement())
  providerId   Int
  email        String   @unique @db.VarChar(255)
  password     String?   @db.VarChar(100)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  provider     Provider @relation(fields: [providerId], references: [id])
  profile      Profile?
  userMoodCategory    UserMoodCategory[]
  userAlcoholCategory UserAlcoholCategory[]
  room                ChatParticipant?
}

model Profile {
  userId    Int     @id
  nickname  String  @unique @db.VarChar(30)
  imageUrl  String? @db.VarChar(255)
  createdAt DateTime @default(now())

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MoodCategory {
  id Int @id @default(autoincrement())
  name String @db.VarChar(10)
  createdAt DateTime @default(now())

  userMoodCategory UserMoodCategory[]
  chat ChatMoodCategory[]
}

model AlcoholCategory {
  id Int @id @default(autoincrement())
  name String @db.VarChar(10)
  createdAt DateTime @default(now())

  userAlcoholCategory UserAlcoholCategory[]
  chat ChatAlcoholCategory[]
}

model UserMoodCategory {
  userId Int
  moodCategoryId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  moodCategory MoodCategory @relation(fields: [moodCategoryId], references: [id])

  @@id([userId, moodCategoryId])
}

model UserAlcoholCategory {
  userId Int
  alcoholCategoryId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  alcoholCategory AlcoholCategory @relation(fields: [alcoholCategoryId], references: [id])

  @@id([userId, alcoholCategoryId])
}

model ChatRoomTheme {
  id        Int     @id @default(autoincrement())
  imageUrl  String  @db.VarChar(255)

  chatRoom  ChatRoom[]
}

model ChatRoom {
  id              Int           @id @default(autoincrement())
  themeId         Int
  theme           ChatRoomTheme @relation(fields: [themeId], references: [id])
  name            String        @db.VarChar(50)
  description     String?       @db.VarChar(200)
  maxParticipants Int
  createdAt       DateTime      @default(now())
  deletedAt       DateTime?

  participants        ChatParticipant[]
  alcoholCategory     ChatAlcoholCategory[]
  moodCategory        ChatMoodCategory[]
}

model ChatParticipant {
  userId    Int         @id @unique
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId    Int
  chatRoom  ChatRoom    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  joinedAt  DateTime    @default(now())
  isHost    Boolean     @default(false)
}

model ChatAlcoholCategory {
  roomId            Int
  chatRoom          ChatRoom        @relation(fields: [roomId], references: [id])
  alcoholCategoryId Int
  alcoholCategory   AlcoholCategory @relation(fields: [alcoholCategoryId], references: [id])

  @@id([roomId, alcoholCategoryId])
}

model ChatMoodCategory {
  roomId            Int
  chatRoom          ChatRoom        @relation(fields: [roomId], references: [id])
  moodCategoryId    Int
  moodCategory      MoodCategory    @relation(fields: [moodCategoryId], references: [id])

  @@id([roomId, moodCategoryId])
}